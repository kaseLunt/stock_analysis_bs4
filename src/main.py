# Importing the required modules and functions from other scripts
from extract.data_extraction import fetch_all_data_for_stocks
from transform.data_transformation import transform_data
from load.data_load import establish_connection, run_data_load
import logging
import pandas as pd
import os

# Initialize logging for debugging and tracking
logging.basicConfig(level=logging.INFO)

# Get the directory of the currently executing script
dir_path = os.path.dirname(os.path.realpath(__file__))
stock_data_path = os.path.join(dir_path, '../stock_data.csv')

# Define the main function that orchestrates the ETL process
def main():
    """
    Main function to run the entire ETL process: data extraction, transformation, and loading.
    """

    # Step 1: Data Extraction
    # Log the start of the data extraction process
    logging.info("Starting data extraction process.")
    
    # Call the data extraction function from data_extract.py
    fetch_all_data_for_stocks()
    
    # Log the completion of the data extraction process
    logging.info("Data extraction complete.")

    # Step 2: Data Transformation
    # Log the start of the data transformation process
    logging.info("Starting data transformation process.")
    
    # Read the raw stock data CSV file generated by the data extraction step
    stock_data_df = pd.read_csv(stock_data_path)
    
    # Call the data transformation function from data_transform.py
    transformed_stock_data_df = transform_data(stock_data_df)
    print(transformed_stock_data_df);
    
    # Log the completion of the data transformation process
    logging.info("Data transformation complete.")

    # Step 3: Data Loading
    # Log the start of the data loading process
    logging.info("Starting data loading process.")
    
    # Establish a connection to the PostgreSQL database
    conn = establish_connection()
    
    # If the connection is successfully established, proceed to load data
    if conn:
        # Call the data loading function from data_load.py
        run_data_load(transformed_stock_data_df, conn)
        
    # Log the completion of the data loading process
    logging.info("Data loading complete.")

# Entry point of the script
if __name__ == "__main__":
    main()
